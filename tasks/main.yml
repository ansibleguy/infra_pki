---

- name: PKI | Checking config
  ansible.builtin.assert:
    that:
      - pki is defined
      - PKI.instances is defined
      - PKI.instances | is_dict
      - PKI.instances | length > 0
      - not PKI.crl_distribution.enable | bool or PKI.crl_distribution.domain is defined
      - not PKI.crl_distribution.enable | bool or PKI.crl_distribution.domain | valid_domain
      - PKI.mode_public | string in ['0644', '0640']
  tags: always

- name: PKI | Installing requirements
  ansible.builtin.package:
    name: "{{ PKI_HC.requirements }}"
    state: present

- name: PKI | EasyRSA
  ansible.builtin.import_tasks: easyrsa.yml

- name: PKI | Copying scripts
  ansible.builtin.template:
    src: "templates/usr/local/sbin/{{ item }}.j2"
    dest: "{{ PKI_HC.path.script }}/{{ item }}"
    mode: 0750
    owner: 'root'
    group: 'root'
  loop:
    - 'pki_cert.sh'
    - 'pki_privileges.sh'
    - 'pki_crl_update.sh'

- name: PKI | Processing instances
  ansible.builtin.include_tasks: instance/main.yml
  vars:
    pki_name: "{{ pki_item.key | safe_key }}"
    pki_cnf: "{{ defaults_instance | combine(pki_item.value, recursive=true) }}"
    pki_vars: "{{ defaults_vars |
    combine(defaults_vars_root_ca, recursive=true) |
    combine(PKI.vars, recursive=true) |
    combine(pki_cnf.vars, recursive=true) }}"
    pki_path_base: "{{ pki_cnf.path_base }}/{{ pki_name }}"
    pki_path_ca: "{{ pki_path_base }}/{{ PKI_HC.dir.root_ca }}"
    task_prefix_pki: "PKI | RootCA '{{ pki_name }}'"
    pki_vars_param: "--vars={{ pki_path_ca }}/vars --batch"
  loop_control:
    loop_var: pki_item
  with_dict: "{{ PKI.instances }}"
  no_log: true  # passwords
  tags: [instances, subcas, certs, certs_renew, certs_create, certs_revoke]
  args:
    apply:
      tags: [instances]

- name: PKI | Services
  ansible.builtin.import_tasks: services.yml
  tags: services

# todo: option to set-up nginx to server ca.crt and crl.pem to 'clients'
