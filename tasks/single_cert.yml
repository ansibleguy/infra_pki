---

# NOTE: a dedicated 'role-interface' to create/renew/revoke a single certificate inside a SubCA

- name: PKI | Single Cert | Setting vars (1/3)
  ansible.builtin.set_fact:
    task_prefix_cert: "PKI | Single Cert"
    pki_cnf: "{{ defaults_instance | combine(PKI.instances[pki_name], recursive=true) }}"
    pki_cnf_subca: "{{ defaults_subca | combine(PKI.instances[pki_name]['sub_cas'][pki_name_subca], recursive=true) }}"

- name: PKI | Single Cert | Setting vars (2/3)
  ansible.builtin.set_fact:
    pki_path_subca: "{{ pki_cnf.path_base }}/{{ pki_name }}/{{ PKI_HC.dir.prefix_subca }}{{ pki_name_subca }}"
    pki_cert_name: "{{ pki_cert_name | safe_key }}"

- name: PKI | Single Cert | Setting vars (3/3)
  ansible.builtin.set_fact:
    pki_vars_param: "--vars={{ pki_path_subca }}/vars --batch"
    provided_pwd_cert: "{{ pki_cert_pwd | default(none, true) is not none }}"
    provided_pwd_subca: "{{ pki_subca_pwd | default(none, true) is not none }}"

- name: "{{ task_prefix_cert }} | Validating input"
  ansible.builtin.assert:
    that:
      - pki_name | default(none, true) is not none
      - pki_name_subca | default(none, true) is not none
      - pki_cert_name | default(none, true) is not none
      - pki_cert_action in ['create', 'renew', 'revoke']
      - pki_cert_type in PKI_HC.cert.types
      - PKI.save_passwords | bool or provided_pwd_subca | bool
      - pki_cert_cnf | is_dict

- name: "{{ task_prefix_cert }} | Checking if sub-ca exists"
  ansible.builtin.stat:
    path: "{{ pki_path_subca }}/ca.crt"
  register: pki_sc_subca_file
  failed_when: not pki_sc_subca_file.stat.exists

- name: "{{ task_prefix_cert }} | Loading password"
  block:
    - name: "{{ task_prefix_cert }} | Retrieving CA-password from file"
      ansible.builtin.command: "cat {{ pki_path_subca }}/{{ PKI_HC.file.pwd_ca }}"
      register: pki_subca_pwd_file_txt
      changed_when: false
      no_log: true

    - name: "{{ task_prefix_cert }} | Setting CA-password to saved one"
      ansible.builtin.set_fact:
        pki_subca_pwd: "{{ pki_subca_pwd_file_txt.stdout }}"
  when: PKI.save_passwords | bool

- name: "{{ task_prefix_cert }} | No or empty Sub-CA password"
  ansible.builtin.fail:
    msg: 'The Sub-CA password is empty or was not provided!'
  when: pki_subca_pwd | default(none, true) is none

- name: "{{ task_prefix_cert }} | Managing certificate"
  ansible.builtin.import_tasks: instance/certs/manage.yml
  vars:
    task_prefix_certs: "{{ task_prefix_cert }}"
